name: Deploy LexoBot Administration Center

on:
  push:
    branches:
      - principal

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Prepare dist folder
        run: |
          rm -rf dist
          mkdir dist

          # Copy backend
          cp -r backend-admin dist/backend-admin

          # Copy frontend
          cp -r frontend-admin dist/frontend-admin
          
          # Copiar docker-compose
          cp infra/docker/docker-compose-admin.yml dist/

      - name: Build and package backend
        run: |
          docker build -t backend-admin-image dist/backend-admin
          docker save backend-admin-image | gzip > dist/backend-admin.tar.gz

      - name: Build and package frontend
        run: |
          docker build \
            --build-arg NEXT_PUBLIC_API_LEXOBOT_URL=${{ secrets.NEXT_PUBLIC_API_LEXOBOT_URL }} \
            -t frontend-admin-image dist/frontend-admin
          docker save frontend-admin-image | gzip > dist/frontend-admin.tar.gz

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Transfer files to server
        run: |
          rsync -avz -e "ssh -o StrictHostKeyChecking=no" dist/*.tar.gz dist/docker-compose-admin.yml ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:~/lexobot-deploy/

      - name: Deploy on server
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
            set -e
            cd ~/lexobot-deploy

            # Stop existing services
            docker compose -f docker-compose-admin.yml down || true

            # Load new images
            docker load -i backend-admin.tar.gz
            docker load -i frontend-admin.tar.gz

            # Create .env file dynamically with secrets
            echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" > .env
            echo "FASTAPI_TITLE=${{ secrets.FASTAPI_TITLE }}" >> .env
            echo "POSTGRESQL_SERVER=postgres" >> .env
            echo "POSTGRESQL_USER=${{ secrets.POSTGRES_USER }}" >> .env
            echo "POSTGRESQL_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> .env
            echo "POSTGRESQL_DB=${{ secrets.POSTGRES_DB }}" >> .env
            echo "POSTGRESQL_PORT=5432" >> .env
            echo "CORS_ORIGINS=${{ secrets.CORS_ORIGINS }}" >> .env
            echo "NEXT_PUBLIC_API_LEXOBOT_URL=${{ secrets.NEXT_PUBLIC_API_LEXOBOT_URL }}" >> .env

            chmod 600 .env

            # Launch containers
            docker compose -f docker-compose-admin.yml up -d

            # Clean up
            rm -f *.tar.gz

            # Delete dangling images
            docker rmi $(docker images -f "dangling=true" -q)
          EOF
